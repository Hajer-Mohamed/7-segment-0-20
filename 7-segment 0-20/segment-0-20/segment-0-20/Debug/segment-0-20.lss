
segment-0-20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000624  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000624  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00000df8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ac  00000000  00000000  00000ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000032b  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057a  00000000  00000000  00001acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  0000204c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000216  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b6  00000000  00000000  000023a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b1 02 	call	0x562	; 0x562 <main>
  8a:	0c 94 10 03 	jmp	0x620	; 0x620 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <button_init>:


#include "DIO.h"
void button_init(char port,char pin)
{
	set_pin_dir(port,pin,0); //input device 
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	0e 94 52 00 	call	0xa4	; 0xa4 <set_pin_dir>
}
  98:	08 95       	ret

0000009a <button_read>:
char button_read(char port , char pin)
{
	return DIO_read_pin(port,pin);
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	0e 94 c1 01 	call	0x382	; 0x382 <DIO_read_pin>
  a2:	08 95       	ret

000000a4 <set_pin_dir>:
 */ 
#include<avr/io.h>
#include "std_macros.h"
void set_pin_dir(char port ,char pin,char dir)
{
	switch(port)
  a4:	84 34       	cpi	r24, 0x44	; 68
  a6:	09 f4       	brne	.+2      	; 0xaa <set_pin_dir+0x6>
  a8:	71 c0       	rjmp	.+226    	; 0x18c <set_pin_dir+0xe8>
  aa:	85 34       	cpi	r24, 0x45	; 69
  ac:	48 f4       	brcc	.+18     	; 0xc0 <set_pin_dir+0x1c>
  ae:	82 34       	cpi	r24, 0x42	; 66
  b0:	99 f1       	breq	.+102    	; 0x118 <set_pin_dir+0x74>
  b2:	83 34       	cpi	r24, 0x43	; 67
  b4:	08 f0       	brcs	.+2      	; 0xb8 <set_pin_dir+0x14>
  b6:	4d c0       	rjmp	.+154    	; 0x152 <set_pin_dir+0xae>
  b8:	81 34       	cpi	r24, 0x41	; 65
  ba:	09 f0       	breq	.+2      	; 0xbe <set_pin_dir+0x1a>
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <set_pin_dir+0x120>
  be:	0f c0       	rjmp	.+30     	; 0xde <set_pin_dir+0x3a>
  c0:	82 36       	cpi	r24, 0x62	; 98
  c2:	51 f1       	breq	.+84     	; 0x118 <set_pin_dir+0x74>
  c4:	83 36       	cpi	r24, 0x63	; 99
  c6:	20 f4       	brcc	.+8      	; 0xd0 <set_pin_dir+0x2c>
  c8:	81 36       	cpi	r24, 0x61	; 97
  ca:	09 f0       	breq	.+2      	; 0xce <set_pin_dir+0x2a>
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <set_pin_dir+0x120>
  ce:	07 c0       	rjmp	.+14     	; 0xde <set_pin_dir+0x3a>
  d0:	83 36       	cpi	r24, 0x63	; 99
  d2:	09 f4       	brne	.+2      	; 0xd6 <set_pin_dir+0x32>
  d4:	3e c0       	rjmp	.+124    	; 0x152 <set_pin_dir+0xae>
  d6:	84 36       	cpi	r24, 0x64	; 100
  d8:	09 f0       	breq	.+2      	; 0xdc <set_pin_dir+0x38>
  da:	74 c0       	rjmp	.+232    	; 0x1c4 <set_pin_dir+0x120>
  dc:	57 c0       	rjmp	.+174    	; 0x18c <set_pin_dir+0xe8>
	{	
		case 'a':
		case 'A':
		if(dir==1)
  de:	41 30       	cpi	r20, 0x01	; 1
  e0:	69 f4       	brne	.+26     	; 0xfc <set_pin_dir+0x58>
		{
			SET_BIT(DDRA,pin);
  e2:	2a b3       	in	r18, 0x1a	; 26
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	ac 01       	movw	r20, r24
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <set_pin_dir+0x4c>
  ec:	44 0f       	add	r20, r20
  ee:	55 1f       	adc	r21, r21
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <set_pin_dir+0x48>
  f4:	ba 01       	movw	r22, r20
  f6:	62 2b       	or	r22, r18
  f8:	6a bb       	out	0x1a, r22	; 26
  fa:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pin);
  fc:	2a b3       	in	r18, 0x1a	; 26
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	ac 01       	movw	r20, r24
 104:	02 c0       	rjmp	.+4      	; 0x10a <set_pin_dir+0x66>
 106:	44 0f       	add	r20, r20
 108:	55 1f       	adc	r21, r21
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <set_pin_dir+0x62>
 10e:	ba 01       	movw	r22, r20
 110:	60 95       	com	r22
 112:	62 23       	and	r22, r18
 114:	6a bb       	out	0x1a, r22	; 26
 116:	08 95       	ret
		}
       break;

		case 'b':
		case 'B':
		if(dir==1)
 118:	41 30       	cpi	r20, 0x01	; 1
 11a:	69 f4       	brne	.+26     	; 0x136 <set_pin_dir+0x92>
		{
			SET_BIT(DDRB,pin);
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	ac 01       	movw	r20, r24
 124:	02 c0       	rjmp	.+4      	; 0x12a <set_pin_dir+0x86>
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <set_pin_dir+0x82>
 12e:	ba 01       	movw	r22, r20
 130:	62 2b       	or	r22, r18
 132:	67 bb       	out	0x17, r22	; 23
 134:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin);
 136:	27 b3       	in	r18, 0x17	; 23
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	ac 01       	movw	r20, r24
 13e:	02 c0       	rjmp	.+4      	; 0x144 <set_pin_dir+0xa0>
 140:	44 0f       	add	r20, r20
 142:	55 1f       	adc	r21, r21
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <set_pin_dir+0x9c>
 148:	ba 01       	movw	r22, r20
 14a:	60 95       	com	r22
 14c:	62 23       	and	r22, r18
 14e:	67 bb       	out	0x17, r22	; 23
 150:	08 95       	ret
		}
		break;

	   case 'C':
	   case 'c':
	   if(dir==1)
 152:	41 30       	cpi	r20, 0x01	; 1
 154:	69 f4       	brne	.+26     	; 0x170 <set_pin_dir+0xcc>
	   {
		   SET_BIT(DDRC,pin);
 156:	24 b3       	in	r18, 0x14	; 20
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	ac 01       	movw	r20, r24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <set_pin_dir+0xc0>
 160:	44 0f       	add	r20, r20
 162:	55 1f       	adc	r21, r21
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <set_pin_dir+0xbc>
 168:	ba 01       	movw	r22, r20
 16a:	62 2b       	or	r22, r18
 16c:	64 bb       	out	0x14, r22	; 20
 16e:	08 95       	ret
	   }
	   else
	   {
		   CLR_BIT(DDRC,pin);
 170:	24 b3       	in	r18, 0x14	; 20
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	ac 01       	movw	r20, r24
 178:	02 c0       	rjmp	.+4      	; 0x17e <set_pin_dir+0xda>
 17a:	44 0f       	add	r20, r20
 17c:	55 1f       	adc	r21, r21
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <set_pin_dir+0xd6>
 182:	ba 01       	movw	r22, r20
 184:	60 95       	com	r22
 186:	62 23       	and	r22, r18
 188:	64 bb       	out	0x14, r22	; 20
 18a:	08 95       	ret
	   }
	   break;

      case 'd':
      case 'D':
      if(dir==1)
 18c:	41 30       	cpi	r20, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <set_pin_dir+0x106>
      {
	      SET_BIT(DDRD,pin);
 190:	21 b3       	in	r18, 0x11	; 17
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	ac 01       	movw	r20, r24
 198:	02 c0       	rjmp	.+4      	; 0x19e <set_pin_dir+0xfa>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <set_pin_dir+0xf6>
 1a2:	ba 01       	movw	r22, r20
 1a4:	62 2b       	or	r22, r18
 1a6:	61 bb       	out	0x11, r22	; 17
 1a8:	08 95       	ret
      }
      else
      {
	      CLR_BIT(DDRD,pin);
 1aa:	21 b3       	in	r18, 0x11	; 17
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	ac 01       	movw	r20, r24
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <set_pin_dir+0x114>
 1b4:	44 0f       	add	r20, r20
 1b6:	55 1f       	adc	r21, r21
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <set_pin_dir+0x110>
 1bc:	ba 01       	movw	r22, r20
 1be:	60 95       	com	r22
 1c0:	62 23       	and	r22, r18
 1c2:	61 bb       	out	0x11, r22	; 17
 1c4:	08 95       	ret

000001c6 <DIO_write_pin>:
	}
}

void DIO_write_pin(char port,char pin ,char val)
{
	switch(port)
 1c6:	84 34       	cpi	r24, 0x44	; 68
 1c8:	09 f4       	brne	.+2      	; 0x1cc <DIO_write_pin+0x6>
 1ca:	71 c0       	rjmp	.+226    	; 0x2ae <DIO_write_pin+0xe8>
 1cc:	85 34       	cpi	r24, 0x45	; 69
 1ce:	48 f4       	brcc	.+18     	; 0x1e2 <DIO_write_pin+0x1c>
 1d0:	82 34       	cpi	r24, 0x42	; 66
 1d2:	99 f1       	breq	.+102    	; 0x23a <DIO_write_pin+0x74>
 1d4:	83 34       	cpi	r24, 0x43	; 67
 1d6:	08 f0       	brcs	.+2      	; 0x1da <DIO_write_pin+0x14>
 1d8:	4d c0       	rjmp	.+154    	; 0x274 <DIO_write_pin+0xae>
 1da:	81 34       	cpi	r24, 0x41	; 65
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <DIO_write_pin+0x1a>
 1de:	83 c0       	rjmp	.+262    	; 0x2e6 <DIO_write_pin+0x120>
 1e0:	0f c0       	rjmp	.+30     	; 0x200 <DIO_write_pin+0x3a>
 1e2:	82 36       	cpi	r24, 0x62	; 98
 1e4:	51 f1       	breq	.+84     	; 0x23a <DIO_write_pin+0x74>
 1e6:	83 36       	cpi	r24, 0x63	; 99
 1e8:	20 f4       	brcc	.+8      	; 0x1f2 <DIO_write_pin+0x2c>
 1ea:	81 36       	cpi	r24, 0x61	; 97
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <DIO_write_pin+0x2a>
 1ee:	7b c0       	rjmp	.+246    	; 0x2e6 <DIO_write_pin+0x120>
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <DIO_write_pin+0x3a>
 1f2:	83 36       	cpi	r24, 0x63	; 99
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <DIO_write_pin+0x32>
 1f6:	3e c0       	rjmp	.+124    	; 0x274 <DIO_write_pin+0xae>
 1f8:	84 36       	cpi	r24, 0x64	; 100
 1fa:	09 f0       	breq	.+2      	; 0x1fe <DIO_write_pin+0x38>
 1fc:	74 c0       	rjmp	.+232    	; 0x2e6 <DIO_write_pin+0x120>
 1fe:	57 c0       	rjmp	.+174    	; 0x2ae <DIO_write_pin+0xe8>
	{
		case 'a':
		case 'A':
		if(val==1)
 200:	41 30       	cpi	r20, 0x01	; 1
 202:	69 f4       	brne	.+26     	; 0x21e <DIO_write_pin+0x58>
		{
			SET_BIT(PORTA,pin);
 204:	2b b3       	in	r18, 0x1b	; 27
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	ac 01       	movw	r20, r24
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_write_pin+0x4c>
 20e:	44 0f       	add	r20, r20
 210:	55 1f       	adc	r21, r21
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_write_pin+0x48>
 216:	ba 01       	movw	r22, r20
 218:	62 2b       	or	r22, r18
 21a:	6b bb       	out	0x1b, r22	; 27
 21c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 21e:	2b b3       	in	r18, 0x1b	; 27
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	ac 01       	movw	r20, r24
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_write_pin+0x66>
 228:	44 0f       	add	r20, r20
 22a:	55 1f       	adc	r21, r21
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_write_pin+0x62>
 230:	ba 01       	movw	r22, r20
 232:	60 95       	com	r22
 234:	62 23       	and	r22, r18
 236:	6b bb       	out	0x1b, r22	; 27
 238:	08 95       	ret
		}
		break;

		case 'b':
		case 'B':
		if(val==1)
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	69 f4       	brne	.+26     	; 0x258 <DIO_write_pin+0x92>
		{
			SET_BIT(PORTB,pin);
 23e:	28 b3       	in	r18, 0x18	; 24
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	ac 01       	movw	r20, r24
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_write_pin+0x86>
 248:	44 0f       	add	r20, r20
 24a:	55 1f       	adc	r21, r21
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_write_pin+0x82>
 250:	ba 01       	movw	r22, r20
 252:	62 2b       	or	r22, r18
 254:	68 bb       	out	0x18, r22	; 24
 256:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 258:	28 b3       	in	r18, 0x18	; 24
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	ac 01       	movw	r20, r24
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_write_pin+0xa0>
 262:	44 0f       	add	r20, r20
 264:	55 1f       	adc	r21, r21
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_write_pin+0x9c>
 26a:	ba 01       	movw	r22, r20
 26c:	60 95       	com	r22
 26e:	62 23       	and	r22, r18
 270:	68 bb       	out	0x18, r22	; 24
 272:	08 95       	ret
		}
		break;

		case 'C':
		case 'c':
		if(val==1)
 274:	41 30       	cpi	r20, 0x01	; 1
 276:	69 f4       	brne	.+26     	; 0x292 <DIO_write_pin+0xcc>
		{
			SET_BIT(PORTC,pin);
 278:	25 b3       	in	r18, 0x15	; 21
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	ac 01       	movw	r20, r24
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_write_pin+0xc0>
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_write_pin+0xbc>
 28a:	ba 01       	movw	r22, r20
 28c:	62 2b       	or	r22, r18
 28e:	65 bb       	out	0x15, r22	; 21
 290:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 292:	25 b3       	in	r18, 0x15	; 21
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	ac 01       	movw	r20, r24
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_write_pin+0xda>
 29c:	44 0f       	add	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	6a 95       	dec	r22
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_write_pin+0xd6>
 2a4:	ba 01       	movw	r22, r20
 2a6:	60 95       	com	r22
 2a8:	62 23       	and	r22, r18
 2aa:	65 bb       	out	0x15, r22	; 21
 2ac:	08 95       	ret
		}
		break;

		case 'd':
		case 'D':
		if(val==1)
 2ae:	41 30       	cpi	r20, 0x01	; 1
 2b0:	69 f4       	brne	.+26     	; 0x2cc <DIO_write_pin+0x106>
		{
			SET_BIT(PORTD,pin);
 2b2:	22 b3       	in	r18, 0x12	; 18
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	ac 01       	movw	r20, r24
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_write_pin+0xfa>
 2bc:	44 0f       	add	r20, r20
 2be:	55 1f       	adc	r21, r21
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_write_pin+0xf6>
 2c4:	ba 01       	movw	r22, r20
 2c6:	62 2b       	or	r22, r18
 2c8:	62 bb       	out	0x12, r22	; 18
 2ca:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2cc:	22 b3       	in	r18, 0x12	; 18
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	ac 01       	movw	r20, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_write_pin+0x114>
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_write_pin+0x110>
 2de:	ba 01       	movw	r22, r20
 2e0:	60 95       	com	r22
 2e2:	62 23       	and	r22, r18
 2e4:	62 bb       	out	0x12, r22	; 18
 2e6:	08 95       	ret

000002e8 <DIO_toggle_pin>:
	}
}

void DIO_toggle_pin(char port,char pin)
{
	  switch(port)
 2e8:	84 34       	cpi	r24, 0x44	; 68
 2ea:	09 f4       	brne	.+2      	; 0x2ee <DIO_toggle_pin+0x6>
 2ec:	3d c0       	rjmp	.+122    	; 0x368 <DIO_toggle_pin+0x80>
 2ee:	85 34       	cpi	r24, 0x45	; 69
 2f0:	40 f4       	brcc	.+16     	; 0x302 <DIO_toggle_pin+0x1a>
 2f2:	82 34       	cpi	r24, 0x42	; 66
 2f4:	f9 f0       	breq	.+62     	; 0x334 <DIO_toggle_pin+0x4c>
 2f6:	83 34       	cpi	r24, 0x43	; 67
 2f8:	50 f5       	brcc	.+84     	; 0x34e <DIO_toggle_pin+0x66>
 2fa:	81 34       	cpi	r24, 0x41	; 65
 2fc:	09 f0       	breq	.+2      	; 0x300 <DIO_toggle_pin+0x18>
 2fe:	40 c0       	rjmp	.+128    	; 0x380 <DIO_toggle_pin+0x98>
 300:	0c c0       	rjmp	.+24     	; 0x31a <DIO_toggle_pin+0x32>
 302:	82 36       	cpi	r24, 0x62	; 98
 304:	b9 f0       	breq	.+46     	; 0x334 <DIO_toggle_pin+0x4c>
 306:	83 36       	cpi	r24, 0x63	; 99
 308:	18 f4       	brcc	.+6      	; 0x310 <DIO_toggle_pin+0x28>
 30a:	81 36       	cpi	r24, 0x61	; 97
 30c:	c9 f5       	brne	.+114    	; 0x380 <DIO_toggle_pin+0x98>
 30e:	05 c0       	rjmp	.+10     	; 0x31a <DIO_toggle_pin+0x32>
 310:	83 36       	cpi	r24, 0x63	; 99
 312:	e9 f0       	breq	.+58     	; 0x34e <DIO_toggle_pin+0x66>
 314:	84 36       	cpi	r24, 0x64	; 100
 316:	a1 f5       	brne	.+104    	; 0x380 <DIO_toggle_pin+0x98>
 318:	27 c0       	rjmp	.+78     	; 0x368 <DIO_toggle_pin+0x80>
	  {
		  case 'a':
		  case 'A':
			  TOG_BIT(PORTA,pin);
 31a:	2b b3       	in	r18, 0x1b	; 27
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	ac 01       	movw	r20, r24
 322:	02 c0       	rjmp	.+4      	; 0x328 <DIO_toggle_pin+0x40>
 324:	44 0f       	add	r20, r20
 326:	55 1f       	adc	r21, r21
 328:	6a 95       	dec	r22
 32a:	e2 f7       	brpl	.-8      	; 0x324 <DIO_toggle_pin+0x3c>
 32c:	ba 01       	movw	r22, r20
 32e:	62 27       	eor	r22, r18
 330:	6b bb       	out	0x1b, r22	; 27
		  break;
 332:	08 95       	ret

		  case 'b':
		  case 'B':
		     TOG_BIT(PORTB,pin);
 334:	28 b3       	in	r18, 0x18	; 24
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	ac 01       	movw	r20, r24
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_toggle_pin+0x5a>
 33e:	44 0f       	add	r20, r20
 340:	55 1f       	adc	r21, r21
 342:	6a 95       	dec	r22
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_toggle_pin+0x56>
 346:	ba 01       	movw	r22, r20
 348:	62 27       	eor	r22, r18
 34a:	68 bb       	out	0x18, r22	; 24
		  break;
 34c:	08 95       	ret

		  case 'C':
		  case 'c':
		    TOG_BIT(PORTC,pin);
 34e:	25 b3       	in	r18, 0x15	; 21
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	ac 01       	movw	r20, r24
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_toggle_pin+0x74>
 358:	44 0f       	add	r20, r20
 35a:	55 1f       	adc	r21, r21
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_toggle_pin+0x70>
 360:	ba 01       	movw	r22, r20
 362:	62 27       	eor	r22, r18
 364:	65 bb       	out	0x15, r22	; 21
		  break;
 366:	08 95       	ret

		  case 'd':
		  case 'D':
		    TOG_BIT(PORTD,pin);
 368:	22 b3       	in	r18, 0x12	; 18
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	ac 01       	movw	r20, r24
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_toggle_pin+0x8e>
 372:	44 0f       	add	r20, r20
 374:	55 1f       	adc	r21, r21
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_toggle_pin+0x8a>
 37a:	ba 01       	movw	r22, r20
 37c:	62 27       	eor	r22, r18
 37e:	62 bb       	out	0x12, r22	; 18
 380:	08 95       	ret

00000382 <DIO_read_pin>:
}

char DIO_read_pin(char port,char pin)
{
	char x;
	switch(port)
 382:	84 34       	cpi	r24, 0x44	; 68
 384:	09 f4       	brne	.+2      	; 0x388 <DIO_read_pin+0x6>
 386:	51 c0       	rjmp	.+162    	; 0x42a <DIO_read_pin+0xa8>
 388:	85 34       	cpi	r24, 0x45	; 69
 38a:	40 f4       	brcc	.+16     	; 0x39c <DIO_read_pin+0x1a>
 38c:	82 34       	cpi	r24, 0x42	; 66
 38e:	39 f1       	breq	.+78     	; 0x3de <DIO_read_pin+0x5c>
 390:	83 34       	cpi	r24, 0x43	; 67
 392:	c0 f5       	brcc	.+112    	; 0x404 <DIO_read_pin+0x82>
 394:	81 34       	cpi	r24, 0x41	; 65
 396:	09 f0       	breq	.+2      	; 0x39a <DIO_read_pin+0x18>
 398:	5a c0       	rjmp	.+180    	; 0x44e <DIO_read_pin+0xcc>
 39a:	0e c0       	rjmp	.+28     	; 0x3b8 <DIO_read_pin+0x36>
 39c:	82 36       	cpi	r24, 0x62	; 98
 39e:	f9 f0       	breq	.+62     	; 0x3de <DIO_read_pin+0x5c>
 3a0:	83 36       	cpi	r24, 0x63	; 99
 3a2:	20 f4       	brcc	.+8      	; 0x3ac <DIO_read_pin+0x2a>
 3a4:	81 36       	cpi	r24, 0x61	; 97
 3a6:	09 f0       	breq	.+2      	; 0x3aa <DIO_read_pin+0x28>
 3a8:	52 c0       	rjmp	.+164    	; 0x44e <DIO_read_pin+0xcc>
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <DIO_read_pin+0x36>
 3ac:	83 36       	cpi	r24, 0x63	; 99
 3ae:	51 f1       	breq	.+84     	; 0x404 <DIO_read_pin+0x82>
 3b0:	84 36       	cpi	r24, 0x64	; 100
 3b2:	09 f0       	breq	.+2      	; 0x3b6 <DIO_read_pin+0x34>
 3b4:	4c c0       	rjmp	.+152    	; 0x44e <DIO_read_pin+0xcc>
 3b6:	39 c0       	rjmp	.+114    	; 0x42a <DIO_read_pin+0xa8>
	{
		case 'a':
		case 'A':
			x=READ_BIT(PINA,pin);
 3b8:	29 b3       	in	r18, 0x19	; 25
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	06 2e       	mov	r0, r22
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_read_pin+0x44>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_read_pin+0x40>
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	82 23       	and	r24, r18
 3ce:	93 23       	and	r25, r19
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_read_pin+0x54>
 3d2:	95 95       	asr	r25
 3d4:	87 95       	ror	r24
 3d6:	6a 95       	dec	r22
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_read_pin+0x50>
 3da:	98 2f       	mov	r25, r24
		break;
 3dc:	38 c0       	rjmp	.+112    	; 0x44e <DIO_read_pin+0xcc>

		case 'b':
		case 'B':
			x=READ_BIT(PINB,pin);
 3de:	26 b3       	in	r18, 0x16	; 22
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	06 2e       	mov	r0, r22
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_read_pin+0x6a>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_read_pin+0x66>
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	82 23       	and	r24, r18
 3f4:	93 23       	and	r25, r19
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_read_pin+0x7a>
 3f8:	95 95       	asr	r25
 3fa:	87 95       	ror	r24
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_read_pin+0x76>
 400:	98 2f       	mov	r25, r24
		break;
 402:	25 c0       	rjmp	.+74     	; 0x44e <DIO_read_pin+0xcc>

		case 'C':
		case 'c':
			x=READ_BIT(PINC,pin);	
 404:	23 b3       	in	r18, 0x13	; 19
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	06 2e       	mov	r0, r22
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_read_pin+0x90>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	0a 94       	dec	r0
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_read_pin+0x8c>
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	82 23       	and	r24, r18
 41a:	93 23       	and	r25, r19
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_read_pin+0xa0>
 41e:	95 95       	asr	r25
 420:	87 95       	ror	r24
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_read_pin+0x9c>
 426:	98 2f       	mov	r25, r24
		break;
 428:	12 c0       	rjmp	.+36     	; 0x44e <DIO_read_pin+0xcc>

		case 'd':
		case 'D':
			x=READ_BIT(PIND,pin);
 42a:	20 b3       	in	r18, 0x10	; 16
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	06 2e       	mov	r0, r22
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_read_pin+0xb6>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	0a 94       	dec	r0
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_read_pin+0xb2>
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	82 23       	and	r24, r18
 440:	93 23       	and	r25, r19
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_read_pin+0xc6>
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_read_pin+0xc2>
 44c:	98 2f       	mov	r25, r24
		break;
	}
return x;
}
 44e:	89 2f       	mov	r24, r25
 450:	08 95       	ret

00000452 <dio_connet_pullup>:
void dio_connet_pullup(char port,char pin, char connect)
{
	DIO_write_pin(port,pin,connect);
 452:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_write_pin>
}
 456:	08 95       	ret

00000458 <set_port_dir>:


void set_port_dir(char port ,char dir)
{
	switch(port)
 458:	84 34       	cpi	r24, 0x44	; 68
 45a:	d9 f0       	breq	.+54     	; 0x492 <set_port_dir+0x3a>
 45c:	85 34       	cpi	r24, 0x45	; 69
 45e:	38 f4       	brcc	.+14     	; 0x46e <set_port_dir+0x16>
 460:	82 34       	cpi	r24, 0x42	; 66
 462:	99 f0       	breq	.+38     	; 0x48a <set_port_dir+0x32>
 464:	83 34       	cpi	r24, 0x43	; 67
 466:	98 f4       	brcc	.+38     	; 0x48e <set_port_dir+0x36>
 468:	81 34       	cpi	r24, 0x41	; 65
 46a:	a1 f4       	brne	.+40     	; 0x494 <set_port_dir+0x3c>
 46c:	0c c0       	rjmp	.+24     	; 0x486 <set_port_dir+0x2e>
 46e:	82 36       	cpi	r24, 0x62	; 98
 470:	61 f0       	breq	.+24     	; 0x48a <set_port_dir+0x32>
 472:	83 36       	cpi	r24, 0x63	; 99
 474:	18 f4       	brcc	.+6      	; 0x47c <set_port_dir+0x24>
 476:	81 36       	cpi	r24, 0x61	; 97
 478:	69 f4       	brne	.+26     	; 0x494 <set_port_dir+0x3c>
 47a:	05 c0       	rjmp	.+10     	; 0x486 <set_port_dir+0x2e>
 47c:	83 36       	cpi	r24, 0x63	; 99
 47e:	39 f0       	breq	.+14     	; 0x48e <set_port_dir+0x36>
 480:	84 36       	cpi	r24, 0x64	; 100
 482:	41 f4       	brne	.+16     	; 0x494 <set_port_dir+0x3c>
 484:	06 c0       	rjmp	.+12     	; 0x492 <set_port_dir+0x3a>
	{
		case 'a':
		case 'A':
			DDRA=dir;
 486:	6a bb       	out	0x1a, r22	; 26
			break;
 488:	08 95       	ret

		case 'b':
		case 'B':
			DDRB=dir;
 48a:	67 bb       	out	0x17, r22	; 23
		   break;
 48c:	08 95       	ret

		case 'C':
		case 'c':
			DDRC=dir;
 48e:	64 bb       	out	0x14, r22	; 20
		break;
 490:	08 95       	ret

		case 'd':
		case 'D':
			DDRD=dir;
 492:	61 bb       	out	0x11, r22	; 17
 494:	08 95       	ret

00000496 <DIO_write_port>:
	}
}

void DIO_write_port(char port,char val)
{
	switch(port)
 496:	84 34       	cpi	r24, 0x44	; 68
 498:	d9 f0       	breq	.+54     	; 0x4d0 <DIO_write_port+0x3a>
 49a:	85 34       	cpi	r24, 0x45	; 69
 49c:	38 f4       	brcc	.+14     	; 0x4ac <DIO_write_port+0x16>
 49e:	82 34       	cpi	r24, 0x42	; 66
 4a0:	99 f0       	breq	.+38     	; 0x4c8 <DIO_write_port+0x32>
 4a2:	83 34       	cpi	r24, 0x43	; 67
 4a4:	98 f4       	brcc	.+38     	; 0x4cc <DIO_write_port+0x36>
 4a6:	81 34       	cpi	r24, 0x41	; 65
 4a8:	a1 f4       	brne	.+40     	; 0x4d2 <DIO_write_port+0x3c>
 4aa:	0c c0       	rjmp	.+24     	; 0x4c4 <DIO_write_port+0x2e>
 4ac:	82 36       	cpi	r24, 0x62	; 98
 4ae:	61 f0       	breq	.+24     	; 0x4c8 <DIO_write_port+0x32>
 4b0:	83 36       	cpi	r24, 0x63	; 99
 4b2:	18 f4       	brcc	.+6      	; 0x4ba <DIO_write_port+0x24>
 4b4:	81 36       	cpi	r24, 0x61	; 97
 4b6:	69 f4       	brne	.+26     	; 0x4d2 <DIO_write_port+0x3c>
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <DIO_write_port+0x2e>
 4ba:	83 36       	cpi	r24, 0x63	; 99
 4bc:	39 f0       	breq	.+14     	; 0x4cc <DIO_write_port+0x36>
 4be:	84 36       	cpi	r24, 0x64	; 100
 4c0:	41 f4       	brne	.+16     	; 0x4d2 <DIO_write_port+0x3c>
 4c2:	06 c0       	rjmp	.+12     	; 0x4d0 <DIO_write_port+0x3a>
	{
		case 'a':
		case 'A':
			PORTA=val;
 4c4:	6b bb       	out	0x1b, r22	; 27
		break;
 4c6:	08 95       	ret

		case 'b':
		case 'B':
			PORTB=val;
 4c8:	68 bb       	out	0x18, r22	; 24
		break;
 4ca:	08 95       	ret

		case 'C':
		case 'c':
			PORTC=val;
 4cc:	65 bb       	out	0x15, r22	; 21
		break;
 4ce:	08 95       	ret

		case 'd':
		case 'D':
			PORTD=val;
 4d0:	62 bb       	out	0x12, r22	; 18
 4d2:	08 95       	ret

000004d4 <DIO_toggle_port>:
	}
}

void DIO_toggle_port(char port)
{
	switch(port)
 4d4:	84 34       	cpi	r24, 0x44	; 68
 4d6:	09 f1       	breq	.+66     	; 0x51a <DIO_toggle_port+0x46>
 4d8:	85 34       	cpi	r24, 0x45	; 69
 4da:	38 f4       	brcc	.+14     	; 0x4ea <DIO_toggle_port+0x16>
 4dc:	82 34       	cpi	r24, 0x42	; 66
 4de:	a9 f0       	breq	.+42     	; 0x50a <DIO_toggle_port+0x36>
 4e0:	83 34       	cpi	r24, 0x43	; 67
 4e2:	b8 f4       	brcc	.+46     	; 0x512 <DIO_toggle_port+0x3e>
 4e4:	81 34       	cpi	r24, 0x41	; 65
 4e6:	e1 f4       	brne	.+56     	; 0x520 <DIO_toggle_port+0x4c>
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <DIO_toggle_port+0x2e>
 4ea:	82 36       	cpi	r24, 0x62	; 98
 4ec:	71 f0       	breq	.+28     	; 0x50a <DIO_toggle_port+0x36>
 4ee:	83 36       	cpi	r24, 0x63	; 99
 4f0:	18 f4       	brcc	.+6      	; 0x4f8 <DIO_toggle_port+0x24>
 4f2:	81 36       	cpi	r24, 0x61	; 97
 4f4:	a9 f4       	brne	.+42     	; 0x520 <DIO_toggle_port+0x4c>
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <DIO_toggle_port+0x2e>
 4f8:	83 36       	cpi	r24, 0x63	; 99
 4fa:	59 f0       	breq	.+22     	; 0x512 <DIO_toggle_port+0x3e>
 4fc:	84 36       	cpi	r24, 0x64	; 100
 4fe:	81 f4       	brne	.+32     	; 0x520 <DIO_toggle_port+0x4c>
 500:	0c c0       	rjmp	.+24     	; 0x51a <DIO_toggle_port+0x46>
	{
		case 'a':
		case 'A':
		PORTA=~PORTA;
 502:	8b b3       	in	r24, 0x1b	; 27
 504:	80 95       	com	r24
 506:	8b bb       	out	0x1b, r24	; 27
		break;
 508:	08 95       	ret

		case 'b':
		case 'B':
		PORTB=~PORTB;
 50a:	88 b3       	in	r24, 0x18	; 24
 50c:	80 95       	com	r24
 50e:	88 bb       	out	0x18, r24	; 24
		break;
 510:	08 95       	ret

		case 'C':
		case 'c':
		PORTC=~PORTC;
 512:	85 b3       	in	r24, 0x15	; 21
 514:	80 95       	com	r24
 516:	85 bb       	out	0x15, r24	; 21
		break;
 518:	08 95       	ret

		case 'd':
		case 'D':
		PORTD=~PORTD;
 51a:	82 b3       	in	r24, 0x12	; 18
 51c:	80 95       	com	r24
 51e:	82 bb       	out	0x12, r24	; 18
 520:	08 95       	ret

00000522 <DIO_read_port>:
}

char DIO_read_port(char port)
{
	char x;
	switch(port)
 522:	84 34       	cpi	r24, 0x44	; 68
 524:	d9 f0       	breq	.+54     	; 0x55c <DIO_read_port+0x3a>
 526:	85 34       	cpi	r24, 0x45	; 69
 528:	38 f4       	brcc	.+14     	; 0x538 <DIO_read_port+0x16>
 52a:	82 34       	cpi	r24, 0x42	; 66
 52c:	99 f0       	breq	.+38     	; 0x554 <DIO_read_port+0x32>
 52e:	83 34       	cpi	r24, 0x43	; 67
 530:	98 f4       	brcc	.+38     	; 0x558 <DIO_read_port+0x36>
 532:	81 34       	cpi	r24, 0x41	; 65
 534:	a1 f4       	brne	.+40     	; 0x55e <DIO_read_port+0x3c>
 536:	0c c0       	rjmp	.+24     	; 0x550 <DIO_read_port+0x2e>
 538:	82 36       	cpi	r24, 0x62	; 98
 53a:	61 f0       	breq	.+24     	; 0x554 <DIO_read_port+0x32>
 53c:	83 36       	cpi	r24, 0x63	; 99
 53e:	18 f4       	brcc	.+6      	; 0x546 <DIO_read_port+0x24>
 540:	81 36       	cpi	r24, 0x61	; 97
 542:	69 f4       	brne	.+26     	; 0x55e <DIO_read_port+0x3c>
 544:	05 c0       	rjmp	.+10     	; 0x550 <DIO_read_port+0x2e>
 546:	83 36       	cpi	r24, 0x63	; 99
 548:	39 f0       	breq	.+14     	; 0x558 <DIO_read_port+0x36>
 54a:	84 36       	cpi	r24, 0x64	; 100
 54c:	41 f4       	brne	.+16     	; 0x55e <DIO_read_port+0x3c>
 54e:	06 c0       	rjmp	.+12     	; 0x55c <DIO_read_port+0x3a>
	{
		case 'a':
		case 'A':
		x=PINA;
 550:	99 b3       	in	r25, 0x19	; 25
		break;
 552:	05 c0       	rjmp	.+10     	; 0x55e <DIO_read_port+0x3c>

		case 'b':
		case 'B':
		x=PINB;
 554:	96 b3       	in	r25, 0x16	; 22
		break;
 556:	03 c0       	rjmp	.+6      	; 0x55e <DIO_read_port+0x3c>

		case 'C':
		case 'c':
		x=PINC;
 558:	93 b3       	in	r25, 0x13	; 19
		break;
 55a:	01 c0       	rjmp	.+2      	; 0x55e <DIO_read_port+0x3c>

		case 'd':
		case 'D':
		x=PIND;
 55c:	90 b3       	in	r25, 0x10	; 16
		break;
	}
	return x;
 55e:	89 2f       	mov	r24, r25
 560:	08 95       	ret

00000562 <main>:
#include <util/delay.h>
#include "seven.h"
#include "button.h"
int main(void)
{
	seven_seg_init('D');
 562:	84 e4       	ldi	r24, 0x44	; 68
 564:	0e 94 de 02 	call	0x5bc	; 0x5bc <seven_seg_init>
	seven_seg_init('B');
 568:	82 e4       	ldi	r24, 0x42	; 66
 56a:	0e 94 de 02 	call	0x5bc	; 0x5bc <seven_seg_init>
	unsigned char counter=0;
	unsigned char button_val;
	button_init('A',0);
 56e:	81 e4       	ldi	r24, 0x41	; 65
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	0e 94 49 00 	call	0x92	; 0x92 <button_init>
#include "button.h"
int main(void)
{
	seven_seg_init('D');
	seven_seg_init('B');
	unsigned char counter=0;
 576:	c0 e0       	ldi	r28, 0x00	; 0
			counter++;   
	   }		   
	   if(counter>20){
		   counter=0;
	   }
	   seven_seg_write('B',counter%10);
 578:	1a e0       	ldi	r17, 0x0A	; 10
	unsigned char counter=0;
	unsigned char button_val;
	button_init('A',0);
    while(1)
    {
       button_val=button_read('A',0);
 57a:	81 e4       	ldi	r24, 0x41	; 65
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	0e 94 4d 00 	call	0x9a	; 0x9a <button_read>
	   if(button_val==1){
 582:	81 30       	cpi	r24, 0x01	; 1
 584:	09 f4       	brne	.+2      	; 0x588 <main+0x26>
			counter++;   
 586:	cf 5f       	subi	r28, 0xFF	; 255
	   }		   
	   if(counter>20){
 588:	c5 31       	cpi	r28, 0x15	; 21
 58a:	08 f0       	brcs	.+2      	; 0x58e <main+0x2c>
		   counter=0;
 58c:	c0 e0       	ldi	r28, 0x00	; 0
	   }
	   seven_seg_write('B',counter%10);
 58e:	8c 2f       	mov	r24, r28
 590:	61 2f       	mov	r22, r17
 592:	0e 94 04 03 	call	0x608	; 0x608 <__udivmodqi4>
 596:	d8 2f       	mov	r29, r24
 598:	82 e4       	ldi	r24, 0x42	; 66
 59a:	69 2f       	mov	r22, r25
 59c:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <seven_seg_write>
	   seven_seg_write('D',counter/10);
 5a0:	84 e4       	ldi	r24, 0x44	; 68
 5a2:	6d 2f       	mov	r22, r29
 5a4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <seven_seg_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a8:	8f ef       	ldi	r24, 0xFF	; 255
 5aa:	91 ee       	ldi	r25, 0xE1	; 225
 5ac:	a4 e0       	ldi	r26, 0x04	; 4
 5ae:	81 50       	subi	r24, 0x01	; 1
 5b0:	90 40       	sbci	r25, 0x00	; 0
 5b2:	a0 40       	sbci	r26, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x4c>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x56>
 5b8:	00 00       	nop
 5ba:	df cf       	rjmp	.-66     	; 0x57a <main+0x18>

000005bc <seven_seg_init>:

#include "DIO.h"

void seven_seg_init(char port_name)
{
	set_port_dir(port_name, 0xff);	
 5bc:	6f ef       	ldi	r22, 0xFF	; 255
 5be:	0e 94 2c 02 	call	0x458	; 0x458 <set_port_dir>
}
 5c2:	08 95       	ret

000005c4 <seven_seg_write>:

void seven_seg_write(char port_name, char val)
{
 5c4:	cf 93       	push	r28
 5c6:	df 93       	push	r29
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	2a 97       	sbiw	r28, 0x0a	; 10
 5ce:	0f b6       	in	r0, 0x3f	; 63
 5d0:	f8 94       	cli
 5d2:	de bf       	out	0x3e, r29	; 62
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[]={0x3f,0x06,0x5b,0x4f,0x66,0x6d, 0x7d, 0x07, 0x7f, 0x6f};
 5d8:	de 01       	movw	r26, r28
 5da:	11 96       	adiw	r26, 0x01	; 1
 5dc:	e0 e6       	ldi	r30, 0x60	; 96
 5de:	f0 e0       	ldi	r31, 0x00	; 0
 5e0:	9a e0       	ldi	r25, 0x0A	; 10
 5e2:	01 90       	ld	r0, Z+
 5e4:	0d 92       	st	X+, r0
 5e6:	91 50       	subi	r25, 0x01	; 1
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <seven_seg_write+0x1e>
	DIO_write_port(port_name,arr[val]);	
 5ea:	fe 01       	movw	r30, r28
 5ec:	e6 0f       	add	r30, r22
 5ee:	f1 1d       	adc	r31, r1
 5f0:	61 81       	ldd	r22, Z+1	; 0x01
 5f2:	0e 94 4b 02 	call	0x496	; 0x496 <DIO_write_port>
 5f6:	2a 96       	adiw	r28, 0x0a	; 10
 5f8:	0f b6       	in	r0, 0x3f	; 63
 5fa:	f8 94       	cli
 5fc:	de bf       	out	0x3e, r29	; 62
 5fe:	0f be       	out	0x3f, r0	; 63
 600:	cd bf       	out	0x3d, r28	; 61
 602:	df 91       	pop	r29
 604:	cf 91       	pop	r28
 606:	08 95       	ret

00000608 <__udivmodqi4>:
 608:	99 1b       	sub	r25, r25
 60a:	79 e0       	ldi	r23, 0x09	; 9
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__udivmodqi4_ep>

0000060e <__udivmodqi4_loop>:
 60e:	99 1f       	adc	r25, r25
 610:	96 17       	cp	r25, r22
 612:	08 f0       	brcs	.+2      	; 0x616 <__udivmodqi4_ep>
 614:	96 1b       	sub	r25, r22

00000616 <__udivmodqi4_ep>:
 616:	88 1f       	adc	r24, r24
 618:	7a 95       	dec	r23
 61a:	c9 f7       	brne	.-14     	; 0x60e <__udivmodqi4_loop>
 61c:	80 95       	com	r24
 61e:	08 95       	ret

00000620 <_exit>:
 620:	f8 94       	cli

00000622 <__stop_program>:
 622:	ff cf       	rjmp	.-2      	; 0x622 <__stop_program>
